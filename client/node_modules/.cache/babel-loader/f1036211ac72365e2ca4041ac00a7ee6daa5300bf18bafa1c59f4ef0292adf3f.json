{"ast":null,"code":"var _jsxFileName = \"/Users/adonaydagosto/Desktop/Chat_react/client/src/components/ChatContainercopy.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\n// import ScrollToBottom from \"react-scroll-to-bottom\";\nimport './ChatContainercopy.css';\n\n// import Chatinput from \"./Chatinput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ChatContainercopy(_ref) {\n  _s();\n  let {\n    socket,\n    username,\n    room\n  } = _ref;\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n  const messageEndRef = useRef(null);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messageList]);\n  function scrollToBottom() {\n    var _messageEndRef$curren;\n    (_messageEndRef$curren = messageEndRef.current) === null || _messageEndRef$curren === void 0 ? void 0 : _messageEndRef$curren.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }\n  function getFormattedDate() {\n    const date = new Date();\n    const year = date.getFullYear();\n    let month = (1 + date.getMonth()).toString();\n    month = month.length > 1 ? month : \"0\" + month;\n    let day = date.getDate().toString();\n    day = day.length > 1 ? day : \"0\" + day;\n    return month + \"/\" + day + \"/\" + year;\n  }\n  useEffect(() => {\n    socket.off(\"room-messages\").on(\"room-messagess\", roomMessages => {\n      // setMessageList((list) => [...list, roomMessages]);\n      setMessageList(roomMessages);\n    });\n  }, [socket]);\n  const todayDate = getFormattedDate();\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const today = new Date();\n      const room_name = room;\n      const author = username;\n      const minutes = today.getMinutes() < 10 ? \"0\" + today.getMinutes() : today.getMinutes();\n      const time = today.getHours() + \":\" + minutes;\n      const content = currentMessage;\n      // const messageData = {\n      // //     room: room,\n      // //     author: username,\n      // //     content: currentMessage,\n      // //     time:\n      // //         time,\n      // //     date:\n      // //         todayDate,\n      // // };\n\n      await socket.emit(\"message-room\", room_name, content, author, time, todayDate);\n      // setMessageList((list) => [...list, messageData]);\n      setCurrentMessage(\"\");\n    }\n    console.log(messageList);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-container\",\n        children: [messageList.map((_ref2, idx) => {\n          let {\n            _id: date,\n            messagesByDate\n          } = _ref2;\n          /*#__PURE__*/_jsxDEV(\"div\", {\n            children: messagesByDate === null || messagesByDate === void 0 ? void 0 : messagesByDate.map((_ref3, msgIdx) => {\n              let {\n                content,\n                time,\n                from: sender\n              } = _ref3;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message\",\n                id: username === sender ? \"you\" : \"other\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"message-content\",\n                    children: /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: content\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 83,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 82,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"message-meta\",\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      id: \"time\",\n                      children: time\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 86,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                      id: \"author\",\n                      children: sender\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 87,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 85,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 37\n                }, this)\n              }, msgIdx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 33\n              }, this);\n            })\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messageEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setCurrentMessage(e.target.value),\n          onKeyPress: event => {\n            event.key === \"Enter\" && sendMessage();\n          },\n          value: currentMessage,\n          type: \"text\",\n          className: \"txt-input\",\n          placeholder: \"Send a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          type: \"submit\",\n          className: \"btn-submit\",\n          id: \"chat-submit\",\n          children: \"send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(ChatContainercopy, \"p5V1cp1M/FuCjWIS52GlaV93Fyk=\");\n_c = ChatContainercopy;\nvar _c;\n$RefreshReg$(_c, \"ChatContainercopy\");","map":{"version":3,"names":["React","useEffect","useState","useRef","ChatContainercopy","socket","username","room","currentMessage","setCurrentMessage","messageList","setMessageList","messageEndRef","scrollToBottom","current","scrollIntoView","behavior","getFormattedDate","date","Date","year","getFullYear","month","getMonth","toString","length","day","getDate","off","on","roomMessages","todayDate","sendMessage","today","room_name","author","minutes","getMinutes","time","getHours","content","emit","console","log","map","idx","_id","messagesByDate","msgIdx","from","sender","e","target","value","event","key"],"sources":["/Users/adonaydagosto/Desktop/Chat_react/client/src/components/ChatContainercopy.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\n// import ScrollToBottom from \"react-scroll-to-bottom\";\nimport './ChatContainercopy.css'\n\n// import Chatinput from \"./Chatinput\";\nexport default function ChatContainercopy({ socket, username, room }) {\n    const [currentMessage, setCurrentMessage] = useState(\"\");\n    const [messageList, setMessageList] = useState([]);\n    const messageEndRef = useRef(null);\n\n    useEffect(() => {\n        scrollToBottom();\n    }, [messageList]);\n\n    function scrollToBottom() {\n        messageEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    }\n    function getFormattedDate() {\n        const date = new Date();\n        const year = date.getFullYear();\n        let month = (1 + date.getMonth()).toString();\n\n        month = month.length > 1 ? month : \"0\" + month;\n        let day = date.getDate().toString();\n\n        day = day.length > 1 ? day : \"0\" + day;\n\n        return month + \"/\" + day + \"/\" + year;\n    }\n\n    useEffect(() => {\n        socket.off(\"room-messages\").on(\"room-messagess\", (roomMessages) => {\n            // setMessageList((list) => [...list, roomMessages]);\n            setMessageList(roomMessages);\n        });\n    }, [socket]);\n\n    const todayDate = getFormattedDate();\n\n    const sendMessage = async () => {\n        if (currentMessage !== \"\") {\n            const today = new Date();\n            const room_name = room\n            const author = username\n            const minutes = today.getMinutes() < 10 ? \"0\" + today.getMinutes() : today.getMinutes();\n            const time = today.getHours() + \":\" + minutes;\n            const content = currentMessage\n            // const messageData = {\n            // //     room: room,\n            // //     author: username,\n            // //     content: currentMessage,\n            // //     time:\n            // //         time,\n            // //     date:\n            // //         todayDate,\n            // // };\n\n            await socket.emit(\"message-room\", room_name, content, author, time, todayDate);\n            // setMessageList((list) => [...list, messageData]);\n            setCurrentMessage(\"\");\n        }\n        console.log(messageList)\n\n    };\n\n\n\n\n    return (\n        <>\n            <div className='chat-container'>\n                <div className=\"message-container\">\n                    {messageList.map(({ _id: date, messagesByDate }, idx) => {\n\n                        <div key={idx}>\n                            {messagesByDate?.map(({ content, time, from: sender }, msgIdx) => (\n                                <div\n                                    className=\"message\"\n                                    id={username === sender ? \"you\" : \"other\"} key={msgIdx}\n                                >\n                                    <div>\n                                        <div className=\"message-content\">\n                                            <p>{content}</p>\n                                        </div>\n                                        <div className=\"message-meta\">\n                                            <p id=\"time\">{time}</p>\n                                            <p id=\"author\">{sender}</p>\n                                        </div>\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    })}\n                    <div ref={messageEndRef} />\n                </div>\n                <div className=\"chat-input\" >\n                    <input onChange={(e) => setCurrentMessage(e.target.value)} onKeyPress={(event) => {\n                        event.key === \"Enter\" && sendMessage();\n                    }}\n                        value={currentMessage} type=\"text\" className=\"txt-input\" placeholder=\"Send a message...\" />\n                    <button onClick={sendMessage} type=\"submit\" className=\"btn-submit\" id=\"chat-submit\">send</button>\n                </div>\n                {/* <Chatinput /> */}\n            </div>\n        </>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}