{"ast":null,"code":"var _jsxFileName = \"/Users/adonaydagosto/Desktop/Chat_react/client/src/components/ChatContainercopy.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\n// import ScrollToBottom from \"react-scroll-to-bottom\";\nimport './ChatContainercopy.css';\n// import { useAuthContext } from '../hooks/useAuthContext'\n\nimport axios from \"axios\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { sendMessageRoute, recieveMessageRoute } from \"../utils/APIRoutes\";\n\n// import Chatinput from \"./Chatinput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ChatContainercopy(_ref) {\n  _s();\n  let {\n    socket,\n    userId,\n    currentChat\n  } = _ref;\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n  const messageEndRef = useRef(null);\n  // const { user } = useAuthContext()\n  const [arrivalMessage, setArrivalMessage] = useState(null);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messageList]);\n  function scrollToBottom() {\n    var _messageEndRef$curren;\n    (_messageEndRef$curren = messageEndRef.current) === null || _messageEndRef$curren === void 0 ? void 0 : _messageEndRef$curren.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }\n  useEffect(async () => {\n    const data = await JSON.parse(localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY));\n    const response = await axios.post(recieveMessageRoute, {\n      from: data._id,\n      to: currentChat._id\n    });\n    setMessageList(response.data);\n  }, [currentChat]);\n  useEffect(() => {\n    const getCurrentChat = async () => {\n      if (currentChat) {\n        await JSON.parse(localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY))._id;\n      }\n    };\n    getCurrentChat();\n  }, [currentChat]);\n  function getFormattedDate() {\n    const date = new Date();\n    const year = date.getFullYear();\n    let month = (1 + date.getMonth()).toString();\n    month = month.length > 1 ? month : \"0\" + month;\n    let day = date.getDate().toString();\n    day = day.length > 1 ? day : \"0\" + day;\n    return month + \"/\" + day + \"/\" + year;\n  }\n  const todayDate = getFormattedDate();\n\n  // useEffect(() => {\n  //     socket.current.on(\"room-messages\", (roomMessages) => {\n  //         // setMessageList((list) => [...list, roomMessages]);\n  //         setMessageList(roomMessages);\n  //     });\n  // }, [messageList]);\n\n  // console.log(\"rooom Msgs: \" + messageList)\n\n  // socket.off(\"room-messages\").on(\"room-messages\", (roomMessages) => {\n  //     // setMessageList((list) => [...list, roomMessages]);\n  //     setMessageList(roomMessages);\n  //     console.log(\"roomMsgs:\" + roomMessages)\n\n  // });\n  const sendMessage = async () => {\n    // if (currentMessage !== \"\") {\n    //     const today = new Date();\n    //     const room = currentChat._id\n    //     const author = userId\n    //     const minutes = today.getMinutes() < 10 ? \"0\" + today.getMinutes() : today.getMinutes();\n    //     const time = today.getHours() + \":\" + minutes;\n    //     const content = currentMessage\n    //     await socket.current.emit(\"message-room\", room, content, author, time, todayDate);\n    //     // setMessageList((list) => [...list, messageData]);\n    //     setCurrentMessage(\"\");\n    // }\n\n    if (currentMessage !== \"\") {\n      const data = await JSON.parse(localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY));\n      socket.current.emit(\"send-msg\", {\n        to: currentChat._id,\n        from: data._id,\n        currentMessage\n      });\n      await axios.post(sendMessageRoute, {\n        from: data._id,\n        to: currentChat._id,\n        message: currentMessage\n      });\n      const msgs = [...messageList];\n      msgs.push({\n        fromSelf: true,\n        message: currentMessage\n      });\n      setMessageList(msgs);\n    }\n  };\n  useEffect(() => {\n    if (socket.current) {\n      socket.current.on(\"msg-recieve\", msg => {\n        setArrivalMessage({\n          fromSelf: false,\n          message: msg\n        });\n      });\n    }\n  }, []);\n  useEffect(() => {\n    arrivalMessage && setMessageList(prev => [...prev, arrivalMessage]);\n  }, [arrivalMessage]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-container\",\n        children: [messageList.map(message => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: scrollRef,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `message ${message.fromSelf ? \"sended\" : \"recieved\"}`,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"content \",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: message.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 33\n            }, this)\n          }, uuidv4(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 29\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messageEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setCurrentMessage(e.target.value),\n          onKeyPress: event => {\n            event.key === \"Enter\" && sendMessage();\n          },\n          value: currentMessage,\n          type: \"text\",\n          className: \"txt-input\",\n          placeholder: \"Send a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          type: \"submit\",\n          className: \"btn-submit\",\n          id: \"chat-submit\",\n          children: \"send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(ChatContainercopy, \"O1E129f+afwZX5bXZzfO80/+Yac=\");\n_c = ChatContainercopy;\nvar _c;\n$RefreshReg$(_c, \"ChatContainercopy\");","map":{"version":3,"names":["React","useEffect","useState","useRef","axios","v4","uuidv4","sendMessageRoute","recieveMessageRoute","ChatContainercopy","socket","userId","currentChat","currentMessage","setCurrentMessage","messageList","setMessageList","messageEndRef","arrivalMessage","setArrivalMessage","scrollToBottom","current","scrollIntoView","behavior","data","JSON","parse","localStorage","getItem","process","env","REACT_APP_LOCALHOST_KEY","response","post","from","_id","to","getCurrentChat","getFormattedDate","date","Date","year","getFullYear","month","getMonth","toString","length","day","getDate","todayDate","sendMessage","emit","message","msgs","push","fromSelf","on","msg","prev","map","scrollRef","e","target","value","event","key"],"sources":["/Users/adonaydagosto/Desktop/Chat_react/client/src/components/ChatContainercopy.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\n// import ScrollToBottom from \"react-scroll-to-bottom\";\nimport './ChatContainercopy.css'\n// import { useAuthContext } from '../hooks/useAuthContext'\n\n\nimport axios from \"axios\";\nimport { v4 as uuidv4 } from \"uuid\"\nimport { sendMessageRoute, recieveMessageRoute } from \"../utils/APIRoutes\";\n\n// import Chatinput from \"./Chatinput\";\nexport default function ChatContainercopy({ socket, userId, currentChat }) {\n    const [currentMessage, setCurrentMessage] = useState(\"\");\n    const [messageList, setMessageList] = useState([]);\n\n    const messageEndRef = useRef(null);\n    // const { user } = useAuthContext()\n    const [arrivalMessage, setArrivalMessage] = useState(null);\n\n    useEffect(() => {\n        scrollToBottom();\n    }, [messageList]);\n\n    function scrollToBottom() {\n        messageEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    }\n\n    useEffect(async () => {\n        const data = await JSON.parse(\n            localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY)\n        );\n        const response = await axios.post(recieveMessageRoute, {\n            from: data._id,\n            to: currentChat._id,\n        });\n        setMessageList(response.data);\n    }, [currentChat]);\n\n    useEffect(() => {\n        const getCurrentChat = async () => {\n            if (currentChat) {\n                await JSON.parse(\n                    localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY)\n                )._id;\n            }\n        };\n        getCurrentChat();\n    }, [currentChat]);\n\n    function getFormattedDate() {\n        const date = new Date();\n        const year = date.getFullYear();\n        let month = (1 + date.getMonth()).toString();\n\n        month = month.length > 1 ? month : \"0\" + month;\n        let day = date.getDate().toString();\n\n        day = day.length > 1 ? day : \"0\" + day;\n\n        return month + \"/\" + day + \"/\" + year;\n    }\n\n    const todayDate = getFormattedDate();\n\n    // useEffect(() => {\n    //     socket.current.on(\"room-messages\", (roomMessages) => {\n    //         // setMessageList((list) => [...list, roomMessages]);\n    //         setMessageList(roomMessages);\n    //     });\n    // }, [messageList]);\n\n    // console.log(\"rooom Msgs: \" + messageList)\n\n    // socket.off(\"room-messages\").on(\"room-messages\", (roomMessages) => {\n    //     // setMessageList((list) => [...list, roomMessages]);\n    //     setMessageList(roomMessages);\n    //     console.log(\"roomMsgs:\" + roomMessages)\n\n    // });\n    const sendMessage = async () => {\n        // if (currentMessage !== \"\") {\n        //     const today = new Date();\n        //     const room = currentChat._id\n        //     const author = userId\n        //     const minutes = today.getMinutes() < 10 ? \"0\" + today.getMinutes() : today.getMinutes();\n        //     const time = today.getHours() + \":\" + minutes;\n        //     const content = currentMessage\n        //     await socket.current.emit(\"message-room\", room, content, author, time, todayDate);\n        //     // setMessageList((list) => [...list, messageData]);\n        //     setCurrentMessage(\"\");\n        // }\n\n        if (currentMessage !== \"\") {\n            const data = await JSON.parse(\n                localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY)\n            );\n            socket.current.emit(\"send-msg\", {\n                to: currentChat._id,\n                from: data._id,\n                currentMessage,\n            });\n            await axios.post(sendMessageRoute, {\n                from: data._id,\n                to: currentChat._id,\n                message: currentMessage,\n            });\n\n            const msgs = [...messageList];\n            msgs.push({ fromSelf: true, message: currentMessage });\n            setMessageList(msgs);\n        }\n    };\n    useEffect(() => {\n        if (socket.current) {\n            socket.current.on(\"msg-recieve\", (msg) => {\n                setArrivalMessage({ fromSelf: false, message: msg });\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        arrivalMessage && setMessageList((prev) => [...prev, arrivalMessage]);\n    }, [arrivalMessage]);\n    return (\n        <>\n            <div className='chat-container'>\n                <div className=\"message-container\">\n                    {/* {messageList.map((messageContent) => {\n                        <div\n                            className=\"message\"\n                            id={username === messageContent.from ? \"you\" : \"other\"} key={messageContent.time}\n                        >\n                            <div>\n                                <div className=\"message-content\">\n                                    <p>{messageContent.content}</p>\n                                </div>\n                                <div className=\"message-meta\">\n                                    <p id=\"time\">{messageContent.time}</p>\n                                    <p id=\"author\">{messageContent.sender}</p>\n                                </div>\n                            </div>\n                        </div>\n                    })} */}\n                    {/* 2 */}\n                    {/* {\n                        messageList.map(({ _id: date, messagesByDate }, idx) => (\n                            <div key={idx}>\n                                {messagesByDate.map(({ content, time, from: sender }, msgIdx) => (\n                                    <div className=\"message\" key={msgIdx}>\n\n                                        <div>\n                                            <div className=\"message-content\">\n                                                <p>{content}</p>\n                                            </div>\n                                            <div className=\"message-meta\">\n                                                <p id=\"time\">{time}</p>\n                                                <p id=\"author\">{sender}</p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                        ))} */}\n                    {/* 3 */}\n                    {messageList.map((message) => {\n                        return (\n                            <div ref={scrollRef} key={uuidv4()}>\n                                <div\n                                    className={`message ${message.fromSelf ? \"sended\" : \"recieved\"\n                                        }`}\n                                >\n                                    <div className=\"content \">\n                                        <p>{message.message}</p>\n                                    </div>\n                                </div>\n                            </div>\n                        );\n                    })}\n                    <div ref={messageEndRef} />\n                </div>\n                <div className=\"chat-input\" >\n                    <input onChange={(e) => setCurrentMessage(e.target.value)} onKeyPress={(event) => {\n                        event.key === \"Enter\" && sendMessage();\n                    }}\n                        value={currentMessage} type=\"text\" className=\"txt-input\" placeholder=\"Send a message...\" />\n                    <button onClick={sendMessage} type=\"submit\" className=\"btn-submit\" id=\"chat-submit\">send</button>\n                </div>\n                {/* <Chatinput /> */}\n            </div>\n        </>\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}